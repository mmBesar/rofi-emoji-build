# .github/workflows/build-and-release.yml
name: Build and Release rofi-emoji

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag to build (leave empty for latest)'
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        debian_version: 
          - bookworm
          - trixie  
          - sid
    name: build-${{ matrix.debian_version }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Determine version and tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.tag_name }}" ]; then
          TAG_NAME="${{ inputs.tag_name }}"
          echo "Using manually specified tag: $TAG_NAME"
        elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAG_NAME="${{ github.ref_name }}"
          echo "Using pushed tag: $TAG_NAME"
        else
          git fetch origin upstream:upstream || true
          TAG_NAME=$(git tag --sort=-version:refname | head -1)
          echo "Using latest tag: $TAG_NAME"
        fi
        
        if [ -z "$TAG_NAME" ]; then
          echo "ERROR: No tag found!"
          exit 1
        fi
        
        VERSION=${TAG_NAME#v}
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION from tag: $TAG_NAME"
        
    - name: Build in Debian container
      env:
        TAG_NAME: ${{ steps.version.outputs.tag_name }}
        VERSION: ${{ steps.version.outputs.version }}
        DEBIAN_VERSION: ${{ matrix.debian_version }}
      run: |
        cat > build-script.sh << 'SCRIPT_EOF'
        #!/bin/bash
        set -e
        
        echo "Building rofi-emoji version: $VERSION from tag: $TAG_NAME"
        
        # Fix Git security issue
        git config --global --add safe.directory /workspace
        
        # Update package lists
        apt-get update
        
        # Install build tools
        apt-get install -y devscripts build-essential git curl wget
        
        # Install rofi-emoji build dependencies
        apt-get install -y autoconf automake libtool-bin libtool pkg-config
        
        # Install rofi development files and dependencies
        apt-get install -y rofi-dev || {
          echo 'rofi-dev not available, installing rofi and trying to get dev files'
          apt-get install -y rofi
          apt-get install -y libcairo2-dev libglib2.0-dev libpango1.0-dev
        }
        
        # Additional dependencies for rofi plugin development
        apt-get install -y libglib2.0-dev libcairo2-dev libpango1.0-dev
        apt-get install -y libxkbcommon-dev libxcb1-dev
        
        # Switch to upstream branch and checkout the specific tag
        git checkout upstream
        git checkout $TAG_NAME
        echo "Checked out tag: $TAG_NAME from upstream branch"
        git log -1 --oneline
        
        # Create proper source structure for Debian packaging
        mkdir -p rofi-emoji-${VERSION}
        cp -r * rofi-emoji-${VERSION}/ || true
        cp -r .* rofi-emoji-${VERSION}/ 2>/dev/null || true
        
        # Copy our debian directory to the source
        cp -r /workspace/debian rofi-emoji-${VERSION}/
        cd rofi-emoji-${VERSION}
        
        # Update changelog with proper version and debian version
        sed -i "1s/.*/rofi-emoji (${VERSION}-1~${DEBIAN_VERSION}) unstable; urgency=medium/" debian/changelog
        
        # Make sure debian/rules is executable
        chmod +x debian/rules
        
        # Run autoreconf to generate configure script
        echo "Running autoreconf..."
        autoreconf -fiv
        
        # Test configuration
        echo "Testing configure..."
        ./configure --prefix=/usr
        
        # Clean for package build
        make clean || true
        
        # Build the package
        echo "Building Debian package..."
        dpkg-buildpackage -us -uc -b
        
        # Move built packages
        cd ..
        mkdir -p /workspace/packages/${DEBIAN_VERSION}
        mv *.deb /workspace/packages/${DEBIAN_VERSION}/ 2>/dev/null || true
        mv *.changes /workspace/packages/${DEBIAN_VERSION}/ 2>/dev/null || true
        mv *.buildinfo /workspace/packages/${DEBIAN_VERSION}/ 2>/dev/null || true
        
        # List what was built
        echo "Built packages:"
        ls -la /workspace/packages/${DEBIAN_VERSION}/
        SCRIPT_EOF
        
        chmod +x build-script.sh
        
        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          -e TAG_NAME="$TAG_NAME" \
          -e VERSION="$VERSION" \
          -e DEBIAN_VERSION="$DEBIAN_VERSION" \
          debian:${{ matrix.debian_version }} \
          /workspace/build-script.sh
    
    - name: Upload packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rofi-emoji-${{ matrix.debian_version }}
        path: packages/${{ matrix.debian_version }}/*.deb
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine version for release
      id: release_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.tag_name }}" ]; then
          TAG_NAME="${{ inputs.tag_name }}"
        elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAG_NAME="${{ github.ref_name }}"
        else
          TAG_NAME=$(git tag --sort=-version:refname | head -1)
        fi
        
        VERSION=${TAG_NAME#v}
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION from tag: $TAG_NAME"
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
        path: release-packages
        
    - name: List downloaded packages
      run: |
        echo "Downloaded packages:"
        find release-packages -name "*.deb" -type f
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_version.outputs.tag_name }}
        name: rofi-emoji ${{ steps.release_version.outputs.version }} - Debian Packages
        body: |
          ## üéØ rofi-emoji ${{ steps.release_version.outputs.version }} - Multi-Debian Support
          
          Emoji selector plugin for Rofi with clipboard and insertion support.
          Built from upstream tag [\`${{ steps.release_version.outputs.tag_name }}\`](https://github.com/Mange/rofi-emoji/releases/tag/${{ steps.release_version.outputs.tag_name }}).
          
          ### ‚ú® Features:
          - üîç **Search emojis** by name, keywords, or category  
          - üìã **Copy to clipboard** with xclip/xsel/wl-clipboard support
          - ‚å®Ô∏è  **Direct insertion** into focused applications
          - üè∑Ô∏è  **Filter by groups** (@symbols) and subgroups (#mammal)
          - üé® **Customizable format** and theming
          - üñ•Ô∏è  **X11 and Wayland** compatible
          
          ### üì¶ Installation:
          
          Download the appropriate `.deb` file for your Debian version:
          - **Debian 12 (Bookworm)**: `rofi-emoji_*~bookworm*_amd64.deb`
          - **Debian 13 (Trixie)**: `rofi-emoji_*~trixie*_amd64.deb`  
          - **Debian Sid (Unstable)**: `rofi-emoji_*~sid*_amd64.deb`
          
          **Install with apt:**
          ```bash
          sudo apt install ./rofi-emoji_*.deb
          ```
          
          **Or with dpkg:**
          ```bash
          sudo dpkg -i rofi-emoji_*.deb
          sudo apt-get install -f  # Fix any dependencies
          ```
          
          ### üöÄ Usage:
          ```bash
          # Basic emoji selector
          rofi -modi emoji -show emoji
          
          # With custom keybind for copy (Ctrl+C)
          rofi -modi emoji -show emoji -kb-custom-1 Ctrl+c
          
          # Copy mode (no insertion)
          rofi -modi emoji -show emoji -emoji-mode copy
          ```
          
          ### üìã Dependencies:
          - **Required**: `rofi`
          - **Clipboard**: `xclip` OR `xsel` OR `wl-clipboard` 
          - **Insertion**: `xdotool` (X11) OR `wtype` (Wayland)
          
          ### üîó Links:
          - **Upstream**: [Mange/rofi-emoji](https://github.com/Mange/rofi-emoji)
          - **Documentation**: [Plugin Usage Guide](https://github.com/Mange/rofi-emoji#usage)
          - **Rofi**: [davatorium/rofi](https://github.com/davatorium/rofi)
          
          ---
          **Built automatically from upstream** ‚Ä¢ Compatible with Debian 12, 13, and Sid
        files: release-packages/*.deb
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
